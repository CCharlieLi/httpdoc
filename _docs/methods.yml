# main sources:
#    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3
"OPTIONS":
  desc: |
    The OPTIONS method represents a request for information about the
    communication options available on the request/response chain identified by
    the URI. This method allows the client to determine the options and/or
    requirements associated with a resource, or the capabilities of a server,
    without implying a resource action or initiating a resource retrieval.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.2
"GET":
  desc: |
    The GET method means retrieve whatever information (in the form of an
    entity) is identified by the URI. If the URI refers to a data-producing
    process, it is the produced data which shall be returned as the entity in
    the response and not the source text of the process, unless that text
    happens to be the output of the process.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3
"HEAD":
  desc: |
    The HEAD method is identical to GET except that the server must not return
    a body in the response. The metainformation contained in the HTTP headers
    in response to a HEAD request should be identical to the information sent
    in response to a GET request. This method can be used for obtaining
    metainformation about the entity implied by the request without
    transferring the entity-body itself. This method is often used for testing
    hypertext links for validity, accessibility, and recent modification.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.4
"POST":
  desc: |
    The POST method is used to request that the server accept the entity
    enclosed in the request as a new subordinate of the resource identified by
    the URI in the Request-Line. POST is designed to allow a uniform method to
    cover the following functions:

      - Annotation of existing resources;
      - Posting a message to a bulletin board, newsgroup, mailing list,
        or similar group of articles;
      - Providing a block of data, such as the result of submitting a
        form, to a data-handling process;
      - Extending a database through an append operation.

    The actual function performed by the POST method is determined by the
    server and is usually dependent on the Request-URI. The posted entity is
    subordinate to that URI in the same way that a file is subordinate to a
    directory containing it, a news article is subordinate to a newsgroup to
    which it is posted, or a record is subordinate to a database.

    The action performed by the POST method might not result in a resource that
    can be identified by a URI. In this case, either 200 (OK) or 204 (No
    Content) is the appropriate response status, depending on whether or not
    the response includes an entity that describes the result.

    If a resource has been created on the origin server, the response SHOULD be
    201 (Created) and contain an entity which describes the status of the
    request and refers to the new resource, and a Location header (see section
    14.30).
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5
"PUT":
  desc: |
    The PUT method requests that the enclosed entity be stored under the
    supplied URI. If the URI refers to an already existing resource, the
    enclosed entity should be considered as a modified version of the one
    residing on the server.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6
"DELETE":
  desc: |
    The DELETE method requests that the server delete the resource identified
    by the URI. This method may be overridden by human intervention (or other
    means) on the server. The client cannot be guaranteed that the operation
    has been carried out, even if the status code returned from the origin
    server indicates that the action has been completed successfully. However,
    the server should not indicate success unless, at the time the response is
    given, it intends to delete the resource or move it to an inaccessible
    location.

    A successful response SHOULD be 200 (OK) if the response includes an entity
    describing the status, 202 (Accepted) if the action has not yet been
    enacted, or 204 (No Content) if the action has been enacted but the
    response does not include an entity.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.7
"TRACE":
  desc: |
    The TRACE method is used to invoke a remote, application-layer loop-back
    of the request message. The final recipient of the request SHOULD reflect
    the message received back to the client as the entity-body of a 200 (OK)
    response. The final recipient is either the server or the first proxy or
    gateway to receive a Max-Forwards value of zero (0) in the request. A TRACE
    request must not include an entity.

    TRACE allows the client to see what is being received at the other end of
    the request chain and use that data for testing or diagnostic information.
    The value of the Via header field is of particular interest, since it acts
    as a trace of the request chain. Use of the Max-Forwards header field
    allows the client to limit the length of the request chain, which is useful
    for testing a chain of proxies forwarding messages in an infinite loop.

    If the request is valid, the response should contain the entire request
    message in the body, with a Content-Type of "message/http".
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.8
"CONNECT":
  desc: |
    This specification reserves the method name CONNECT for use with a proxy
    that can dynamically switch to being a tunnel (e.g. SSL tunneling).
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.9
"PATCH":
  desc: |
    The PATCH method requests that a set of changes described in the request
    entity be applied to the resource identified by the URI. The set of changes
    is represented in a format called a "patch document" identified by a media
    type. If the URI does not point to an existing resource, the server may
    create a new resource, depending on the patch document type, permissions,
    etc.
    The difference between the PUT and PATCH methods is reflected in the way
    the server processes the enclosed entity to modify the resource identified
    by the URI. In a PUT request, the enclosed entity is considered to be a
    modified version of the resource stored on the server, and the client is
    requesting that the stored version be replaced. With PATCH, however, the
    enclosed entity contains a set of instructions describing how a resource on
    the server should be modified to produce a new version. The PATCH method
    affects the resource identified by the URI, and it also may have side
    effects on other resources; i.e., new resources may be created, or existing
    ones modified, by the application of a PATCH.
  refs:
    - http://tools.ietf.org/html/rfc5789#section-2
