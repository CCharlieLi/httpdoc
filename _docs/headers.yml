# main sources:
#    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
#    - http://en.wikipedia.org/wiki/List_of_HTTP_header_fields
#    - https://msdn.microsoft.com/en-us/library/ie/cc288325(v=vs.85).aspx#SetMode
"Accept":
  type: request
  desc: |
    The Accept header field can be used to specify certain media types which
    are acceptable for the response. Accept headers can be used to indicate
    that the request is specifically limited to a small set of desired types,
    as in the case of a request for an in-line image.

    The asterisk "*" character is used to group media types into ranges, with
    "*/*" indicating all media types and "type/*" indicating all subtypes of
    that type. The media-range may include media type parameters that are
    applicable to that range.

    Each media-range may be followed by one or more accept-params, beginning
    with the "q" parameter for indicating a relative quality factor. The first
    "q" parameter (if any) separates the media-range parameter(s) from the
    accept-params. Quality factors allow the user to indicate the relative
    degree of preference for that media-range, using the qvalue scale from 0 to
    1. The default value is q=1.

    Example:
      Accept: text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c

    Verbally, this would be interpreted as "text/html and text/x-c are the
    preferred media types, but if they do not exist, then send the text/x-dvi
    entity, and if that doesn’t exist, send the text/plain entity."
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1
"Accept-Charset":
  type: request
  desc: |
    The Accept-Charset header field can be used to indicate what character sets
    are acceptable for the response. This field allows clients capable of
    understanding more comprehensive or special-purpose character sets to
    signal that capability to a server which is capable of representing
    documents in those character sets.

    Each charset may be given an associated quality value which represents the
    user's preference for that charset. The default value is q=1. For example:

      Accept-Charset: iso-8859-5, unicode-1-1;q=0.8

    The special value "*", if present in the Accept-Charset field, matches
    every character set (including ISO-8859-1) which is not mentioned elsewhere
    in the Accept-Charset field. If no "*" is present in an Accept-Charset
    field, then all character sets not explicitly mentioned get a quality value
    of 0, except for ISO-8859-1, which gets a quality value of 1 if not
    explicitly mentioned.

    If no Accept-Charset header is present, the default is that any character
    set is acceptable. If an Accept-Charset header is present, and if the
    server cannot send a response which is acceptable according to the
    Accept-Charset header, then the server should send an error response with
    the 406 (not acceptable) status code, though the sending of an unacceptable
    response is also allowed.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2
"Accept-Encoding":
  type: request
  desc: |
    The Accept-Encoding header field is similar to Accept, but restricts the
    content-codings that are acceptable in the response.

    Examples of its use are:

       Accept-Encoding: compress, gzip
       Accept-Encoding:
       Accept-Encoding: *
       Accept-Encoding: compress;q=0.5, gzip;q=1.0
       Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0

    If an Accept-Encoding field is present in a request, and if the server
    cannot send a response which is acceptable according to the Accept-Encoding
    header, then the server should send an error response with the 406 (Not
    Acceptable) status code.

    If no Accept-Encoding field is present in a request, the server may assume
    that the client will accept any content coding. In this case, if "identity"
    is one of the available content-codings, then the server should use the
    "identity" content-coding, unless it has additional information that a
    different content-coding is meaningful to the client.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3
"Accept-Language":
  type: request
  desc: |
    The Accept-Language header field is similar to Accept, but restricts the
    set of natural languages that are preferred as a response to the request.

    Each language-range may be given an associated quality value which
    represents an estimate of the user's preference for the languages specified
    by that range. The quality value defaults to "q=1". For example,

        Accept-Language: da, en-gb;q=0.8, en;q=0.7

    would mean: "I prefer Danish, but will accept British English and other
    types of English."
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4
"Accept-Ranges":
  type: response
  desc: |
    The Accept-Ranges header field allows the server to indicate its acceptance
    of range requests for a resource.

    Servers that accept byte-range requests may send

        Accept-Ranges: bytes

    but are not required to do so. Servers that do not accept any kind of range
    request for a resource may send

        Accept-Ranges: none

    to advise the client not to attempt a range request.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.5
"Age":
  type: response
  desc: |
    The Age header field conveys the sender's estimate of the amount of time
    since the response (or its revalidation) was generated at the origin
    server.
    Age values are non-negative decimal integers, representing time in seconds.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.6
"Allow":
  type: response
  desc: |
    The Allow header field lists the set of methods supported by the resource
    identified by the Request-URI. The purpose of this field is strictly to
    inform the recipient of valid methods associated with the resource. An
    Allow header field MUST be present in a 405 (Method Not Allowed) response.

    Example of use:
        Allow: GET, HEAD, PUT
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.7
"Authorization":
  type: request
  desc: |
    A user agent that wishes to authenticate itself with a server–usually, but
    not necessarily, after receiving a 401 response–does so by including an
    Authorization request-header field with the request. The Authorization
    field value consists of credentials containing the authentication
    information of the user agent for the realm of the resource being
    requested.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.8
"Cache-Control":
  type: both
  desc: |
    The Cache-Control header field is used to specify directives that must be
    obeyed by all caching mechanisms along the request/response chain. The
    directives specify behavior intended to prevent caches from adversely
    interfering with the request or response. They typically override the
    default caching algorithms. Cache directives are unidirectional in that the
    presence of a directive in a request doesn’t imply that the same directive
    is to be given in the response.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9
"Connection":
  type: both
  desc: |
    The Connection header field allows the sender to specify options that are
    desired for that particular connection and must not be communicated by
    proxies over further connections.

    HTTP/1.1 defines the "close" connection option for the sender to signal
    that the connection will be closed after completion of the response. For
    example,

        Connection: close

    in either the request or the response header fields indicates that the
    connection should not be considered "persistent" after the current
    request/response is complete.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.10
"Content-Encoding":
  type: response
  desc: |
    The Content-Encoding header field is used as a modifier to the media-type.
    When present, its value indicates what additional content codings have been
    applied to the body, and thus what decoding mechanisms must be applied in
    order to obtain the media-type referenced by the Content-Type header field.
    Content-Encoding is primarily used to allow a document to be compressed
    without losing the identity of its underlying media type.

    For example:

        Content-Encoding: gzip
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11
"Content-Language":
  type: response
  desc: |
    The Content-Language header field describes the natural language(s) of the
    intended audience for the enclosed entity. Note that this might not be
    equivalent to all the languages used within the body.

    The primary purpose of Content-Language is to allow a user to identify and
    differentiate entities according to the user's own preferred language.
    Thus, if the body content is intended only for a Danish-literate audience,
    the appropriate field is:

        Content-Language: da

    If no Content-Language is specified, the default is that the content is
    intended for all language audiences. This might mean that the sender does
    not consider it to be specific to any natural language, or that the sender
    doesn’t know for which language it is intended.

    Multiple languages may be listed for content that is intended for multiple
    audiences. For example, a rendition of the "Treaty of Waitangi," presented
    simultaneously in the original Maori and English versions, would call for

       Content-Language: mi, en

    However, just because multiple languages are present within an entity does
    not mean that it is intended for multiple linguistic audiences. An example
    would be a beginner's language primer, such as "A First Lesson in Latin,"
    which is clearly intended to be used by an English-literate audience. In
    this case, the Content-Language would properly only include "en".

    Content-Language may be applied to any media type – it is not limited to
    textual documents.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.12
"Content-Length":
  type: both
  desc: |
    The Content-Length header field indicates the size of the body, in decimal
    number of octets, sent to the recipient or, in the case of the HEAD method,
    the size of the body that would have been sent had the request been a GET.

    An example is

       Content-Length: 3495

    Applications should use this field to indicate the transfer-length of the
    body.

    Any Content-Length greater than or equal to zero is a valid value.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13
"Content-Location":
  type: response
  desc: |
    The Content-Location entity-header field may be used to supply the resource
    location for the entity enclosed in the message when that entity is
    accessible from a location separate from the requested resource's URI. A
    server should provide a Content-Location for the variant corresponding to
    the response entity; especially in the case where a resource has multiple
    entities associated with it, and those entities actually have separate
    locations by which they might be individually accessed, the server should
    provide a Content-Location for the particular variant which is returned.

    The value of Content-Location also defines the base URI for the entity.

    The Content-Location value is not a replacement for the original requested
    URI; it is only a statement of the location of the resource corresponding
    to this particular entity at the time of the request. Future requests may
    specify the Content-Location URI as the URI if the desire is to identify
    the source of that particular entity.

    The meaning of the Content-Location header in PUT or POST requests is
    undefined; servers are free to ignore it in those cases.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.14
"Content-MD5":
  type: both
  desc: |
    The Content-MD5 header field is an MD5 digest of the body for the purpose
    of providing an end-to-end message integrity check (MIC) of the body.

    The MD5 digest is computed based on the content of the body, including any
    content-coding that has been applied, but not including any
    transfer-encoding applied to the body. If the message is received with a
    transfer-encoding, that encoding must be removed prior to checking the
    Content-MD5 value against the received entity.

    This has the result that the digest is computed on the octets of the
    body exactly as, and in the order that, they would be sent if no
    transfer-encoding were being applied.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.15
"Content-Range":
  type: response
  desc: |
    The Content-Range entity-header is sent with a partial body to specify
    where in the full body the partial body should be applied.

    The header should indicate the total length of the full body, unless this
    length is unknown or difficult to determine. The asterisk "*" character
    means that the instance-length is unknown at the time when the response was
    generated.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16
"Content-Type":
  type: both
  desc: |
    The Content-Type entity-header field indicates the media type of the body
    sent to the recipient or, in the case of the HEAD method, the media type
    that would have been sent had the request been a GET.

    For example:

        Content-Type: text/html; charset=ISO-8859-4
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17
"Date":
  type: both
  desc: |
    The Date general-header field represents the date and time at which the
    message was originated.

    For example:

        Date: Tue, 15 Nov 1994 08:12:31 GMT
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.18
"ETag":
  type: response
  desc: |
    The ETag response-header field provides the current value of the entity tag
    for the requested variant. The entity tag may be used for comparison with
    other entities from the same resource.

    Examples:

        ETag: "xyzzy"
        ETag: W/"xyzzy"
        ETag: ""
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19
"Expect":
  type: request
  desc: |
    The Expect header field is used to indicate that particular server
    behaviors are required by the client.

    Example:

        Expect: 100-continue
  refs: |
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.20
"Expires":
  type: response
  desc: |
    The Expires entity-header field gives the date/time after which the
    response is considered stale. A stale cache entry may not normally be
    returned by a cache (either a proxy cache or a user agent cache) unless it
    is first validated with the server (or with an intermediate cache
    that has a fresh copy of the entity).

    The presence of an Expires field doesn’t imply that the original resource
    will change or cease to exist at, before, or after that time.

    An example of its use is

        Expires: Thu, 01 Dec 1994 16:00:00 GMT

    Note: if a response includes a Cache-Control field with the max-age
      directive, that directive overrides the Expires field.

    HTTP/1.1 clients and caches must treat other invalid date formats,
    especially including the value "0", as in the past (i.e., "already
    expired").

    To mark a response as "already expired," a server sends an Expires date
    that is equal to the Date header value.

    To mark a response as "never expires," a server sends an Expires date
    approximately one year from the time the response is sent. HTTP/1.1 servers
    should not send Expires dates more than one year in the future.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21
"From":
  type: request
  desc: |
    The From request-header field, if given, should contain an e-mail
    address for the human user who controls the requesting user agent. The
    address should be machine-usable.

    An example is:

       From: webmaster@w3.org

    This header field may be used for logging purposes and as a means for
    identifying the source of invalid or unwanted requests. It should not be
    used as an insecure form of access protection. The interpretation of this
    field is that the request is being performed on behalf of the person given,
    who accepts responsibility for the method performed. In particular, robot
    agents SHOULD include this header so that the person responsible for
    running the robot can be contacted if problems occur on the receiving end.

    The Internet e-mail address in this field may be separate from the Internet
    host which issued the request. For example, when a request is passed
    through a proxy the original issuer's address should be used.

    The client should not send the From header field without the user's
    approval, as it might conflict with the user's privacy interests or their
    site's security policy. It is strongly recommended that the user be able to
    disable, enable, and modify the value of this field at any time prior to a
    request.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.22
"Host":
  type: request
  desc: |
    The Host header field specifies the Internet host and port number
    of the resource being requested, as obtained from the original URI given by
    the user or referring resource. The Host field value musT represent the
    naming authority of the server or gateway given by the original URL.
    This allows the server or gateway to differentiate between
    internally-ambiguous URLs, such as the root "/" URL of a server for
    multiple host names on a single IP address.

    A "host" without any trailing port information implies the default port for
    the service requested (e.g., "80" for an HTTP URL). For example, a request
    on the server for http://www.w3.org/pub/WWW/ would properly include:

       GET /pub/WWW/ HTTP/1.1
       Host: www.w3.org

    A client must include a Host header field in all HTTP/1.1 request messages.
    If the requested URI doesn’t include an host name for the service being
    requested, the Host header field must be given with an empty value. All
    HTTP/1.1 servers must respond with a 400 (Bad Request) status code to any
    HTTP/1.1 request message which lacks a Host header field.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23
"If-Match":
  type: request
  desc: |
    The If-Match header field is used with a method to make it conditional.

    Example:

        If-Match: "xyzzy"
        If-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"
        If-Match: *
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24
"If-Modified-Since":
  type: request
  desc: |
    The If-Modified-Since request-header field is used with a method to make it
    conditional: if the requested variant has not been modified since the time
    specified in this field, an entity will not be returned from the server;
    instead, a 304 (not modified) response will be returned without any
    message-body.

    An example of the field is:

        If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.25
"If-None-Match":
  type: request
  desc: |
    The If-None-Match header field is used with a method to make it
    conditional.

    Examples:

        If-None-Match: "xyzzy"
        If-None-Match: W/"xyzzy"
        If-None-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"
        If-None-Match: W/"xyzzy", W/"r2d2xxxx", W/"c3piozzzz"
        If-None-Match: *
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26
"If-Range":
  type: request
  desc: |
    If a client has a partial copy of an entity in its cache, and wishes to
    have an up-to-date copy of the entire entity in its cache, it could use the
    Range header with a conditional GET (using either or both of
    If-Unmodified-Since and If-Match). However, if the condition fails because
    the entity has been modified, the client would then have to make a second
    request to obtain the entire current body.

    The If-Range header allows a client to "short-circuit" the second request.
    Informally, its meaning is "if the entity is unchanged, send me the part(s)
    that I am missing; otherwise, send me the entire new entity".
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.27
"If-Unmodified-Since":
  type: request
  desc: |
    The If-Unmodified-Since header field is used with a method to make it
    conditional. If the requested resource has not been modified since the time
    specified in this field, the server should perform the requested operation
    as if the If-Unmodified-Since header were not present.

    If the requested variant has been modified since the specified time, the
    server must not perform the requested operation, and must return a 412
    (Precondition Failed).

    An example of the field is:

        If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT

    If the request normally (i.e., without the If-Unmodified-Since header)
    would result in anything other than a 2xx or 412 status, the
    If-Unmodified-Since header SHOULD be ignored.

    If the specified date is invalid, the header is ignored.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.28
"Last-Modified":
  type: response
  desc: |
    The Last-Modified header field indicates the date and time at which the
    server believes the variant was last modified.

    An example of its use is:

        Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT

    The exact meaning of this header field depends on the implementation of the
    server and the nature of the resource. For files, it may be just the file
    system last-modified time. For entities with dynamically included parts, it
    may be the most recent of the set of last-modify times for its component
    parts. For database gateways, it may be the last-update time stamp of the
    record. For virtual objects, it may be the last time the internal state
    changed.

    A server must not send a Last-Modified date which is later than the
    server’s time of message origination. In such cases, where the resource’s
    last modification would indicate some time in the future, the server must
    replace that date with the message origination date.

    A server should obtain the Last-Modified value of the entity as close as
    possible to the time that it generates the Date value of its response. This
    allows a recipient to make an accurate assessment of the entity's
    modification time, especially if the entity changes near the time that the
    response is generated.

    HTTP/1.1 servers should send Last-Modified whenever feasible.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.29
"Location":
  type: response
  desc: |
    The Location header field is used to redirect the recipient to a location
    other than the URI for completion of the request or identification of a new
    resource. For 201 (Created) responses, the Location is that of the new
    resource which was created by the request. For 3xx responses, the location
    should indicate the server's preferred URI for automatic redirection to the
    resource. The field value consists of a single absolute URI.

    An example is:

        Location: http://www.w3.org/pub/WWW/People.html

    Note: The Content-Location header field differs from Location in that the
      Content-Location identifies the original location of the entity enclosed
      in the request. It is therefore possible for a response to contain header
      fields for both Location and Content-Location.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30
"Max-Forwards":
  type: request
  desc: |
    The Max-Forwards header field provides a mechanism with the TRACE and
    OPTIONS methods to limit the number of proxies or gateways that can forward
    the request to the next inbound server. This can be useful when the client
    is attempting to trace a request chain which appears to be failing or
    looping in mid-chain.

    The Max-Forwards value is a decimal integer indicating the remaining number
    of times this request message may be forwarded.

    Each proxy or gateway recipient of a TRACE or OPTIONS request containing a
    Max-Forwards header field must check and update its value prior to
    forwarding the request. If the received value is zero (0), the recipient
    must not forward the request; instead, it must respond as the final
    recipient. If the received Max-Forwards value is greater than zero, then
    the forwarded message must contain an updated Max-Forwards field with a
    value decremented by one (1).
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.31
"Pragma":
  type: both
  desc: |
    The Pragma header field is used to include implementation-specific
    directives that might apply to any recipient along the request/response
    chain. All pragma directives specify optional behavior from the viewpoint
    of the protocol; however, some systems may require that behavior be
    consistent with the directives.

    When the no-cache directive is present in a request, an application should
    forward the request toward the origin server even if it has a cached copy
    of what is being requested. This pragma directive has the same semantics as
    the no-cache directive and is defined here for backward compatibility with
    HTTP/1.0. Clients should include both header fields when a no-cache request
    is sent to a server not known to be HTTP/1.1 compliant.

    Pragma directives must be passed through by a proxy or gateway application,
    regardless of their significance to that application, since the directives
    might be applicable to all recipients along the request/response chain. It
    is not possible to specify a pragma for a specific recipient.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.32
"Proxy-Authenticate":
  type: response
  desc: |
    The Proxy-Authenticate response-header field must be included as part of a
    407 (Proxy Authentication Required) response. The field value consists of a
    challenge that indicates the authentication scheme and parameters
    applicable to the proxy for this URI.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.33
"Proxy-Authorization":
  type: request
  desc: |
    The Proxy-Authorization header field allows the client to identify itself
    to a proxy which requires authentication. The Proxy-Authorization field
    value consists of credentials containing the authentication information of
    the user agent for the proxy and/or realm of the resource being requested.

    When multiple proxies are used in a chain, the Proxy-Authorization header
    field is consumed by the first outbound proxy that was expecting to receive
    credentials.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.34
"Range":
  type: request
  desc: |
    Request only part of an entity. Bytes are numbered from 0.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35
"Referer":
  type: request
  desc: |
    The Referer (sic) header field allows the client to specify, for the
    server's benefit, the address of the resource from which the URI was
    obtained (the "referrer", although the header field is misspelled). The
    Referer request-header allows a server to generate lists of back-links to
    resources for interest, logging, optimized caching, etc. It also allows
    obsolete or mistyped links to be traced for maintenance. The Referer field
    must not be sent if the URI was obtained from a source that does not have
    its own URI, such as input from the user keyboard.

    Example:

        Referer: http://www.w3.org/hypertext/DataSources/Overview.html

    Note:
      The word “referrer” has been misspelled in the RFC as well as in most
      implementations to the point that it has become standard usage and is
      considered correct terminology.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.36
"Retry-After":
  type: response
  desc: |
    The Retry-After header field can be used with a 503 (Service Unavailable)
    response to indicate how long the service is expected to be unavailable to
    the requesting client. This field may also be used with any 3xx
    (Redirection) response to indicate the minimum time the user-agent is asked
    to wait before issuing the redirected request. The value of this field can
    be either an HTTP-date or an integer number of seconds (in decimal) after
    the time of the response.

    Two examples of its use are

      Retry-After: Fri, 31 Dec 1999 23:59:59 GMT
      Retry-After: 120

    In the latter example, the delay is 2 minutes.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.37
"Server":
  type: response
  desc: |
    The Server header field contains information about the software used by the
    origin server to handle the request. The field can contain multiple product
    tokens and comments identifying the server and any significant subproducts.
    The product tokens are listed in order of their significance for
    identifying the application.

    Example:

        Server: CERN/3.0 libwww/2.17

    If the response is being forwarded through a proxy, the proxy application
    must not modify the Server response-header. Instead, it should include a
    Via field.

    Note: Revealing the specific software version of the server might allow the
      server machine to become more vulnerable to attacks against software that
      is known to contain security holes. Server implementors are encouraged to
      make this field a configurable option.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.38
"TE":
  type: request
  desc: |
    The TE header field indicates what extension transfer-codings it is willing
    to accept in the response and whether or not it is willing to accept
    trailer fields in a chunked transfer-coding. Its value may consist of the
    keyword "trailers" and/or a comma-separated list of extension
    transfer-coding names with optional accept parameters.

    The presence of the keyword "trailers" indicates that the client is willing
    to accept trailer fields in a chunked transfer-coding. This keyword is
    reserved for use with transfer-coding values even though it does not itself
    represent a transfer-coding.

    Examples of its use are:

        TE: deflate
        TE:
        TE: trailers, deflate;q=0.5

    The TE header field only applies to the immediate connection. If the TE
    field-value is empty or if no TE field is present, the only transfer-coding
    is "chunked". A message with no transfer-coding is always acceptable.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.39
"Trailer":
  type: response
  desc: |
    The Trailer general field value indicates that the given set of header
    fields is present in the trailer of a message encoded with chunked
    transfer-coding.

    An HTTP/1.1 message should include a Trailer header field in a message
    using chunked transfer-coding with a non-empty trailer. Doing so allows the
    recipient to know which header fields to expect in the trailer.

    If no Trailer header field is present, the trailer shouldn’t include any
    header fields.

    Header fields listed in the Trailer header field must not include the
    following header fields:

      - Transfer-Encoding
      - Content-Length
      - Trailer
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.40
"Transfer-Encoding":
  type: response
  desc: |
    The Transfer-Encoding header field indicates what (if any) type of
    transformation has been applied to the message body in order to safely
    transfer it between the sender and the recipient. This differs from the
    content-coding in that the transfer-coding is a property of the message,
    not of the entity.

    An example is:

        Transfer-Encoding: chunked
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41
"Upgrade":
  type: response
  desc: |
    The Upgrade header allows the client to specify what additional
    communication protocols it supports and would like to use if the server
    finds it appropriate to switch protocols. The server must use the Upgrade
    header field within a 101 (Switching Protocols) response to indicate which
    protocol(s) are being switched.

    For example,

        Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11

    The Upgrade header field is intended to provide a simple mechanism for
    transition from HTTP/1.1 to some other, incompatible protocol. It does so
    by allowing the client to advertise its desire to use another protocol,
    such as a later version of HTTP with a higher major version number, even
    though the current request has been made using HTTP/1.1. This eases the
    difficult transition between incompatible protocols by allowing the client
    to initiate a request in the more commonly supported protocol while
    indicating to the server that it would like to use a "better" protocol if
    available (where "better" is determined by the server, possibly according
    to the nature of the method and/or resource being requested).
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.42
"User-Agent":
  type: request
  desc: |
    The User-Agent header field contains information about the user agent
    originating the request. This is for statistical purposes, the tracing of
    protocol violations, and automated recognition of user agents for the sake
    of tailoring responses to avoid particular user agent limitations. User
    agents SHOULD include this field with requests. The field can contain
    multiple product tokens and comments identifying the agent and any
    subproducts which form a significant part of the user agent. By convention,
    the product tokens are listed in order of their significance for
    identifying the application.

    Example:

        User-Agent: CERN-LineMode/2.15 libwww/2.17b3
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43
"Vary":
  type: response
  desc: |
    The Vary field value indicates the set of header fields that fully
    determines, while the response is fresh, whether a cache is permitted to
    use the response to reply to a subsequent request without revalidation. For
    uncacheable or stale responses, the Vary field value advises the user agent
    about the criteria that were used to select the representation. A Vary
    field value of "*" implies that a cache cannot determine from the request
    headers of a subsequent request whether this response is the appropriate
    representation.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.44
"Via":
  type: response
  desc: |
    The Via header field must be used by gateways and proxies to indicate the
    intermediate protocols and recipients between the user agent and the server
    on requests, and between the origin server and the client on responses. It
    is intended to be used for tracking message forwards, avoiding request
    loops, and identifying the protocol capabilities of all senders along the
    request/response chain.

    Example:

        Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.45
"Warning":
  type: both
  desc: |
    The Warning header field is used to carry additional information about the
    status or transformation of a message which might not be reflected in the
    message. This information is typically used to warn about a possible lack
    of semantic transparency from caching operations or transformations applied
    to the body of the message.
    A response may carry more than one Warning header.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.46
"WWW-Authenticate":
  type: response
  desc: |
    The WWW-Authenticate header field must be included in 401 (Unauthorized)
    response messages. The field value consists of at least one challenge that
    indicates the authentication scheme(s) and parameters applicable to the
    URI.
  refs:
    - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.47

# Common non-standard fields

"X-UA-Compatible":
  type: response
  desc: |
    Recommends the preferred rendering engine (often a backward-compatibility
    mode) to use to display the content. Also used to activate Chrome Frame in
    Internet Explorer. (non-standard field)

    Example:

      X-UA-Compatible: IE=EmulateIE7
  refs:
    - https://msdn.microsoft.com/en-us/library/ie/cc288325(v=vs.85).aspx#SetMode
    - http://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Common_non-standard_response_fields
